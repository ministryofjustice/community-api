create table R_REGISTER_TYPE
(
  REGISTER_TYPE_ID NUMBER not null
    constraint XPKR_REGISTER_TYPE
      primary key,
  CODE VARCHAR2(10) not null,
  DESCRIPTION VARCHAR2(50) not null,
  SELECTABLE CHAR not null
    constraint YES_OR_NO15
      check (SELECTABLE IN ('N','Y')),
  ROW_VERSION NUMBER default 0 not null,
  ALERT_MESSAGE_TEXT VARCHAR2(4000),
  RECORD_TRIGGER_OFFENCE CHAR,
  RECORD_CATEGORY CHAR,
  REGISTER_REVIEW_PERIOD NUMBER,
  RECORD_LEVEL CHAR,
  TRAINING_SESSION_ID NUMBER
    references TRAINING_SESSION,
  START_DATE DATE not null,
  END_DATE DATE,
  REGISTER_TYPE_FLAG_ID NUMBER not null
    references R_STANDARD_REFERENCE_LIST,
  ALERT_MESSAGE CHAR not null
    constraint YES_OR_NO_ONLY33
      check (ALERT_MESSAGE IN ('Y','N')),
  DPA_EXCLUDE CHAR
    constraint YES_OR_NO_421
      check (DPA_EXCLUDE IN ('Y','N')),
  CREATED_BY_USER_ID NUMBER not null,
  COLOUR VARCHAR2(20),
  LAST_UPDATED_USER_ID NUMBER not null,
  CREATED_DATETIME DATE not null,
  LAST_UPDATED_DATETIME DATE not null,
  DEFAULT_HEADINGS CLOB,
  SPG_INTEREST NUMBER
    constraint TRUE_OR_FALSE_13747429
      check (SPG_INTEREST IN (0, 1)),
  REGISTER_TYPE_SECTOR_ID NUMBER
    constraint R_1103
      references R_STANDARD_REFERENCE_LIST,
  REGISTRATION_CONTACT_TYPE_ID NUMBER
    constraint R_1105
      references R_CONTACT_TYPE,
  DEREGISTRATION_CONTACT_TYPE_ID NUMBER
    constraint R_1106
      references R_CONTACT_TYPE,
  REVIEW_CONTACT_TYPE_ID NUMBER
    constraint R_1107
      references R_CONTACT_TYPE,
  DELETED_CONTACT_TYPE_ID NUMBER
    constraint R_1108
      references R_CONTACT_TYPE,
  SPG_OVERRIDE NUMBER
    constraint TRUE_OR_FALSE_185612578
      check (SPG_OVERRIDE IN (0, 1)),
  IOM_NOMINAL_INDICATOR NUMBER,
  SAFEGUARDING_INDICATOR NUMBER,
  VULNERABILITY_INDICATOR NUMBER,
  constraint XAK1R_REGISTER_TYPE
    unique (CODE, TRAINING_SESSION_ID, REGISTER_TYPE_ID)
);

create table TRIGGER_OFFENCE
(
  TRIGGER_OFFENCE_ID NUMBER not null
    constraint XPKTRIGGER_OFFENCE
      primary key,
  ROW_VERSION NUMBER default 0 not null,
  REGISTER_TYPE_ID NUMBER not null
    references R_REGISTER_TYPE,
  OFFENCE_ID NUMBER not null
    references R_OFFENCE,
  TRAINING_SESSION_ID NUMBER
    references TRAINING_SESSION,
  constraint XAK1TRIGGER_OFFENCE
    unique (REGISTER_TYPE_ID, OFFENCE_ID, TRAINING_SESSION_ID, TRIGGER_OFFENCE_ID)
);


create table REGISTRATION
(
  REGISTRATION_ID NUMBER not null
    constraint XPKREGISTRATION
      primary key,
  REGISTER_TYPE_ID NUMBER not null
    references R_REGISTER_TYPE,
  OFFENDER_ID NUMBER not null
    references OFFENDER,
  REGISTRATION_DATE DATE not null,
  NEXT_REVIEW_DATE DATE,
  REGISTRATION_NOTES CLOB,
  REGISTERING_TEAM_ID NUMBER not null
    references TEAM,
  REGISTERING_STAFF_ID NUMBER not null
    references STAFF,
  REGISTRATION_LEVEL NUMBER,
  SOFT_DELETED NUMBER not null
    constraint TRUE_OR_FALSE34
      check (SOFT_DELETED IN (0, 1)),
  PARTITION_AREA_ID NUMBER not null,
  ROW_VERSION NUMBER default 0 not null,
  REGISTRATION_CATEGORY NUMBER,
  CREATED_DATETIME DATE not null,
  LAST_UPDATED_DATETIME DATE not null,
  TRIGGER_OFFENCE_ID NUMBER
    references TRIGGER_OFFENCE,
  REGISTER_LEVEL_ID NUMBER
    references R_STANDARD_REFERENCE_LIST,
  CREATED_BY_USER_ID NUMBER not null,
  REGISTER_CATEGORY_ID NUMBER
    references R_STANDARD_REFERENCE_LIST,
  LAST_UPDATED_USER_ID NUMBER not null,
  CONTACT_ID NUMBER not null,
  TRAINING_SESSION_ID NUMBER,
  DEREGISTERED NUMBER not null
    constraint TRUE_OR_FALSE35
      check (DEREGISTERED IN (0, 1)),
  ORGANISATIONS T_ARR_ORGANISATIONS,
  constraint REGISTRATION
    check ( (
        (REGISTRATION_DATE <= NEXT_REVIEW_DATE) OR (NEXT_REVIEW_DATE IS NULL)
      ))
);


create table DEREGISTRATION
(
  DEREGISTRATION_ID NUMBER not null
    constraint XPKDEREGISTRATION
      primary key,
  DEREGISTRATION_DATE DATE not null,
  DEREGISTERING_TEAM_ID NUMBER not null
    references TEAM,
  DEREGISTERING_STAFF_ID NUMBER not null
    references STAFF,
  DEREGISTERING_NOTES CLOB,
  SOFT_DELETED NUMBER not null
    constraint TRUE_OR_FALSE28
      check (SOFT_DELETED IN (0, 1)),
  PARTITION_AREA_ID NUMBER not null
    references PARTITION_AREA,
  ROW_VERSION NUMBER default 0 not null,
  REGISTRATION_ID NUMBER not null
    references REGISTRATION,
  CREATED_BY_USER_ID NUMBER not null,
  CREATED_DATETIME DATE not null,
  LAST_UPDATED_USER_ID NUMBER not null,
  LAST_UPDATED_DATETIME DATE not null,
  CONTACT_ID NUMBER not null,
  TRAINING_SESSION_ID NUMBER,
  OFFENDER_ID NUMBER not null
    references OFFENDER,
  ORGANISATIONS T_ARR_ORGANISATIONS
);
